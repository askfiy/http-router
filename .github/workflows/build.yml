name: build

on:
  workflow_run:
    workflows: [tests]
    branches: [master]
    types: [completed]

jobs:

  # We have to repeat https://github.com/actions/toolkit/issues/501
  cythonize:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 5

    - uses: actions/cache@v2.1.5
      id: cache-c
      with:
        path: http_router/*.c
        key: ${{ hashFiles('http_router/router.pyx', 'http_router/routes.pyx', 'http_router/router.pxd', 'http_router/routes.pxd') }}

    - name: Cythonize the package
      run: |
        pip install cython --install-option="--no-cython-compile"
        cython http_router/router.pyx
        cython http_router/routes.pyx
      if: steps.cache-c.outputs.cache-hit != 'true'

    - uses: actions/upload-artifact@v2
      with:
        name: http_router
        path: http_router/*.c

    - name: Build sdist
      run: python3 setup.py sdist

    - uses: actions/upload-artifact@v2
      with:
        name: dist
        path: dist/*.tar.*

  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        cibw_arch: ["auto64", "aarch64", "universal2"]
        cibw_python:
        - "cp37-*"
        - "cp38-*"
        - "cp39-*"
        - "cp310-*"
        exclude:
        - os: ubuntu-latest
          cibw_arch: universal2
        - os: macos-latest
          cibw_arch: aarch64
        - os: macos-latest
          cibw_python: "cp36-*"
          cibw_arch: universal2
        - os: macos-latest
          cibw_python: "cp37-*"
          cibw_arch: universal2
        - os: windows-latest
          cibw_arch: universal2
        - os: windows-latest
          cibw_arch: aarch64

    runs-on: ${{ matrix.os }}
    needs: cythonize

    defaults:
      run:
        shell: bash
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: 1

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 5

    - name: Set up QEMU
      if: matrix.os == 'ubuntu-latest' && matrix.cibw_arch == 'aarch64'
      uses: docker/setup-qemu-action@v1
      with:
        platforms: arm64

    - uses: actions/download-artifact@v2
      with:
        name: http_router
        path: http_router

    - uses: pypa/cibuildwheel@v2.1.1
      env:
        CIBW_BUILD_VERBOSITY: 1
        CIBW_BUILD: ${{ matrix.cibw_python }}
        CIBW_ARCHS: ${{ matrix.cibw_arch }}

    - uses: actions/upload-artifact@v2
      with:
        name: dist
        path: wheelhouse/*.whl

  # build:
  #   strategy:
  #     matrix:
  #       python-version: ['3.7', '3.8', '3.9', '3.10']
  #       os: [macos-latest, windows-latest, ubuntu-latest]
  #   runs-on: ${{ matrix.os }}
  #   needs: cythonize

  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       fetch-depth: 5

  #   - name: Use Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: ${{ matrix.python-version }}

  #   - uses: actions/download-artifact@v2
  #     with:
  #       name: http_router
  #       path: http_router

  #   - name: Build wheels (macos, windows)
  #     run: python3 setup.py bdist_wheel
  #     if: matrix.os != 'ubuntu-latest'

  #   - name: Build wheels (linux)
  #     if: matrix.os == 'ubuntu-latest'
  #     uses: docker://quay.io/pypa/manylinux1_x86_64
  #     env:
  #       PYTHON_VERSION: ${{ matrix.python-version }}
  #     with:
  #       entrypoint: /github/workspace/.github/workflows/build-manylinux.sh

  #   - name: Test wheels
  #     if: |
  #       !startsWith(matrix.os, 'windows')
  #     run: pip3 install --pre http_router -f "file:///${GITHUB_WORKSPACE}/dist"

  #   - uses: actions/upload-artifact@v2
  #     with:
  #       name: dist
  #       path: dist

  publish:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download a distribution artifact
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.pypy }}
